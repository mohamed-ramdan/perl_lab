package blog::Controller::comments;
use Moose;
use namespace::autoclean;

BEGIN { extends 'Catalyst::Controller'; }

=head1 NAME

blog::Controller::comments - Catalyst Controller

=head1 DESCRIPTION

Catalyst Controller.

=head1 METHODS

=cut


=head2 index

=cut



### Create New Starts ########################################################################################################


sub form_create : Local {
        my ($self, $c) = @_;
    
        # Set the TT template to use
        $c->stash->{template} = 'comments/form_create.tt';
    }


sub form_create_do : Local {
        my ($self, $c) = @_;
    
        # Retrieve the values from the form
        
        my $body    = $c->request->params->{body};#    || 'N/A';
        my $user_id = $c->request->params->{user_id} ;#|| '1';
	my $post_id = $c->request->params->{post_id} ;#|| '1';
    
        # Create the user
        my $comment = $c->model('DB::Comment')->create({
                body   => $body,
                user_id  => $user_id,
		post_id  => $post_id,
            });
    
        # Store new model object in stash
        $c->stash->{comment} = $comment;
    
        # Avoid Data::Dumper issue mentioned earlier
        # You can probably omit this    
        $Data::Dumper::Useperl = 1;
    
        # Set the TT template to use
        #$c->stash->{template} = 'users/list.tt';
	$c->stash(template=>'comments/commentaddsucc.tt');
	$c->stash(posts=>[$c->model('DB::Post')->all]);
	
    	}

	


### Create New Ends ########################################################################################################






### Delete Comment starts #####################################################################################################

	## BASE ##########################################################
	sub base :Chained('/') :PathPart('comments') :CaptureArgs(0) {
	my ($self, $c) = @_;
	# Store the ResultSet in stash so it's available for other methods
	$c->stash(resultset => $c->model('DB::Comment'));
	# Print a message to the debug log
	$c->log->debug('*** INSIDE BASE METHOD ***');
	}

	## Object base ###################################################
	sub object :Chained('base') :PathPart('id') :CaptureArgs(1) {
        # $id = primary key of user to delete
        my ($self, $c, $id) = @_;   
        # Find the user object and store it in the stash
        $c->stash(object => $c->stash->{resultset}->find($id));
        # Make sure the lookup was successful.  You would probably
        # want to do something like this in a real app:
        #   $c->detach('/error_404') if !$c->stash->{object};
        die "Comment $id not found!" if !$c->stash->{object};
        # Print a message to the debug log
        $c->log->debug("*** INSIDE OBJECT METHOD for obj id=$id ***");
    	}

	## Delete Object ################################################
	sub delete_c :Chained('object') :PathPart('delete') :Args(0) {
        my ($self, $c) = @_;
        # Use the user object saved by 'object' and delete it along
        $c->stash->{object}->delete;
        # Set a status message to be displayed at the top of the view
        $c->stash->{status_msg} = "Comment deleted.";
        # Forward to the list action/method in this controller
        $c->forward('list');
    	}

### Delete Comment Ends #####################################################################################################













### List Starts ########################################################################################################
sub list:Local{
my($self,$c)=@_;
$c->stash(comments=>[$c->model('DB::Comment')->all]); 
$c->stash(template=>'comments/list.tt');
}
### List  Ends ########################################################################################################




sub index :Path :Args(0) {
    my ( $self, $c ) = @_;

    $c->response->body('Matched blog::Controller::comments in comments.');
}





=encoding utf8

=head1 AUTHOR

mohamedramadan,,,

=head1 LICENSE

This library is free software. You can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

__PACKAGE__->meta->make_immutable;

1;
